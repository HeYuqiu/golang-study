package main

import (
	"encoding/json"
	"fmt"
	"log"
	"regexp"
	"time"
)

type Response1 struct {
	password string
	Password string
	PassWord string
	Fruits   []Response2
}
type Response2 struct {
	name []string `json:"fruits"`
}

func main() {

	people := Response1{
		password: "password",
		Password: "Password",
		PassWord: "PassWord",
		Fruits: []Response2{{
			name: []string{"hyq1", "111"},
		}},
	}

	log := LogDesensitization(people)
	fmt.Println(log)

	log1 := "SDRzSUFBQUFBQUFDLzZ4WGIzUSDRzSUFBQUFBQUFDLzZ4WGIzUGFQQkwvS2TBiMm84SzJjRnpQQjltOGVCRmZ4ZHhHaFE5MGttaXRLL0MrWGl6bUkxUHVrMjZqYjFBNmYzRnpNbWo1bVFWZTNRZHNkdVc3emxXNUcwMHZsek1oalFhM0xhMG50L3JydENnazhObVFNTDVNQS9uRTRvS0o0dUs5aC81NGZlNlBKeTlxaEViODVFOTVvdjUwUHpvekdoNms5LzJMamFqZVVnWGRsc2hyNzlGRzU3NHZVNnltSGMzbzFSWml6UW9valF3dy9sdERtZFhhemh6dHJIWHp4ZjJZOHNmaENKOHNMYmhiR3lobEpwWWY4K0hkamozUDJzTTMrdHZVTThSOFd4SVVlclEyQXUybzVTdVI4MlFJamJPSXZ1aTVROFdyNlBuVG43YnMreHdObDVIOCs0S05XOC9QbTlicXlqdHMzRDJSUzNZUzh1L1dkSElNeitqWnBjdXRtWGVURHp2Nm5qZFJmYUVQbnJ0SXU3d3hCOTAxNGhOdG5lSnZxTlo1VzNLRXppWW1LaFQzUnRwM1d1ZWpKL1J4ZDJYU2haNy9TSzBBL054djNldUg2WHRsekRRdUY5YS92WHQ1bmJhMmVoY2pCNk9iNmRBM3Y0K2c0TmVjbkYzbmV4bGt4VktZeHIzOTN1RDRXYXgrUzMycThaR2RpREQyZGlNbXY0LzlXNStkejZMMk5oY3pKeG5IYWM0VlhRMEg5TkZNeWpnZk9Mb2I4UkNpaEwrSDdEN1pvQTFwTGt1MVI4QTVvcExCQ2xoaVY1aUJpT3ErVXlKSEJzZ2hhOFRYTmE4Qks1amdKU3cwOW8yZ0lJaXdhcDMvd2pjUy9Pd3ZNVXBGNFdXN0F5QVg1V0FIWkZvWTRmbERWc0Q5K3MzQTVBVUp2ZzNaS2RaQnlaYStEUEZhZWFCRWFaN1NFcldtR0VwN3dXUDhKczdMQ0dWMkFCTFNHZ3U4SFFsc0Z4eEdnTzNxYnNGVVFUU2EweGg4WUFSWjdFRWJzczBRSVlGNGZGUlpKa0drRGxDV01vekFNc0FpcVNZNStwTWNiZVBENHhQaUtZQkdJL3hBNllZS1M0cWp6VW5McmxJZTV3dFNSbjI2dXNXWnU4emZoMmxjVlJIbGZvK2JQYzVwZmVjRWxSb2xxY2JXTWpEMWdRblJDcWRBckRLbzBaVUtCdzN1RWhPK3htWFJIRlJURERGVU9yUUU3WkVtZGd2dFk4ODdqREdWVW4yKzBoblBCNmRCVDRUaEdzbmV4UktPYTR5Q0F3Z0lvaktsL1dtdVZnUlZ0QUNCa0FDUTRYM3lka1pRR0FZazM4b2Y5YmZ6WitvSG5lUDUweVZXZ0pMbmd0VTFRb2xLVkhsRjhweTRKb05YUkg3eHc3TWh1TVJVR0w4TjhmeWpaNzlWdEV1TlhjR09LUzV4NW5DcitxZEFseEtUL0E4QTI3TGNab1hCaEE1Njd3bmVwUlk3Q1VsYn96dTVSbHFtNWdFejl3TElNR1lFcElT&password=***&WXNCTnB5UEx3aWlSSlo4a1EweUg3MzRqbTM5cDAwenZlWjVYV0t2VmIxZTcydDh1UHdDREtRWXVXTC9ndXNRb0YwUVZkWW5GR2d0Z0FNS1dITGcvd0pJSXFiN0hPS084d0RGd2dXM2FWdDFzMVcxbmFsbXVmZVUyTHhyT1JkTnB0WnRPNjkvbWxXdWF3QUFVdm5QS011dTJQYlVjMTI2NVZxdHhlZVhZVjYzMnBYMDhGV09LVmFsZkxpUVNKRk9FTStDQ3h5d1JNTVkxeE5OTUt3RURTQVZWTG9FTFpKNWhJWEdNWTdBekFGcEJvYlRyS1ZZd2hncnE3dy92dXNaQ1ZsYXNodGt3NjJ1c3JVQXBmL0dpYysvWHFtTTF2cXlkb3dFRHdJd0VSNlMxWFVxeTRBMjJkZFVFQmxCRnBwMkJXVVlKZ2lYMHpnQ1VveGZnc3B4U0F5aWNaaFFxTElINzllajhVZmhwL1lLL0h3eC9yL3dwZndqQ2pRS21WUHRkWGh3czV0MHNTSU1DMlhRZFBmTWtmcjc1REcyYWg5YzhlYlNESWs3cGMvZ2xVK0Y4c2dxOXZybVk4czkrcjVzdlpoYTlJMTBiMm84SzJjRnpQQjltOGVCRmZ4ZHhHaFE5MGttaXRLL0MrWGl6bUkxUHVrMjZqYjFBNmYzRnpNbWo1bVFWZTNRZHNkdVc3emxXNUcwMHZsek1oalFhM0xhMG50L3JydENnazhObVFNTDVNQS9uRTRvS0o0dUs5aC81NGZlNlBKeTlxaEViODVFOTVvdjUwUHpvekdoNms5LzJMamFqZVVnWGRsc2hyNzlGRzU3NHZVNnltSGMzbzFSWml6UW9valF3dy9sdERtZFhhemh6dHJIWHp4ZjJZOHNmaENKOHNMYmhiR3lobEpwWWY4K0hkamozUDJzTTMrdHZVTThSOFd4SVVlclEyQXUybzVTdVI4MlFJamJPSXZ1aTVROFdyNlBuVG43YnMreHdObDVIOCs0S05XOC9QbTlicXlqdHMzRDJSUzNZUzh1L1dkSElNeitqWnBjdXRtWGVURHp2Nm5qZFJmYUVQbnJ0SXU3d3hCOTAxNGhOdG5lSnZxTlo1VzNLRXppWW1LaFQzUnRwM1d1ZWpKL1J4ZDJYU2haNy9TSzBBL054djNldUg2WHRsekRRdUY5YS92WHQ1bmJhMmVoY2pCNk9iNmRBM3Y0K2c0TmVjbkYzbmV4bGt4VktZeHIzOTN1RDRXYXgrUzMycThaR2RpREQyZGlNbXY0LzlXNStkejZMMk5oY3pKeG5IYWM0VlhRMEg5TkZNeWpnZk9Mb2I4UkNpaEwrSDdEN1pvQTFwTGt1MVI4QTVvcExCQ2xoaVY1aUJpT3ErVXlKSEJzZ2hhOFRYTmE4Qks1amdKU3cwOW8yZ0lJaXdhcDMvd2pjUy9Pd3ZNVXBGNFdXN0F5QVg1V0FIWkZvWTRmbERWc0Q5K3MzQTVBVUp2ZzNaS2RaQnlaYStEUEZhZWFCRWFaN1NFcldtR0VwN3dXUDhKczdMQ0dWMkFCTFNHZ3U4SFFsc0Z4eEdnTzNxYnNGVVFUU2EweGg4WUFSWjdFRWJzczBRSVlGNGZGUlpKa0drRGxDV01vekFNc0FpcVNZNStwTWNiZVBENHhQaUtZQkdJL3hBNllZS1M0cWp6VW5McmxJZTV3dFNSbjI2dXNXWnU4emZoMmxjVlJIbGZvK2JQYzVwZmVjRWxSb2xxY2JXTWpEMWdRblJDcWRBckRLbzBaVUtCdzN1RWhPK3htWFJIRlJURERGVU9yUUU3WkVtZGd2dFk4ODdqREdWVW4yKzBoblBCNmRCVDRUaEdzbmV4UktPYTR5Q0F3Z0lvaktsL1dtdVZnUlZ0QUNCa0FDUTRYM3lka1pRR0FZazM4b2Y5YmZ6WitvSG5lUDUweVZXZ0pMbmd0VTFRb2xLVkhsRjhweTRKb05YUkg3eHc3TWh1TVJVR0w4TjhmeWpaNzlWdEV1TlhjR09LUzV4NW5DcitxZEFseEtUL0E4QTI3TGNab1hCaEE1Njd3bmVwUlk3Q1VsYnRsWnl5ejhuTVNWVXRtWXgvaWU2NW1qYVZxbVdRa3JRZXZ5cXYyMnZrU0czdXBicGF4YVgxMWRYUjNIZzZQYXlZVU9RbFVzZi95U2VNVXBGZ2ZQdm43VFo5QUtwL0F3VVN3SmZUdE5ORmFZcGlSaFhPRFR1REI2bVV6bmxxYllJZTBSSnd1OVlEWGFhSm96VHJSeW9JNDZYMk1oU1B6enpJRlN6ZFA5YlRqWC9mM1ViejdnMGNUM25GVTBDN2JJNjU5enJvT2FFeHJwZnVSTk1tVDNTZVFGczhYc05kT3pDcHkxODZudERDdXVmcFYzcEdzaUZsRE43ZnQrTFNNdmVMa2ozVXRjZFBJZzdjdDRGbXo5d1NiUmZjM3ZEWDgvSTZSQnZwZ05aZmpnSi9GZ2FJVVAzZmF5OU9NNFg3ekJIS1hXT2h3RU1neTZxOWhMa3VYY1hIOTQzMEc0aWdZQlJXWGY3aWgvMEpXTCtTU05ta1AxeFc3bllVcFoxYS9MUHBWRnN6NExneUVOYmJxTkIwUG5GL3ZzdERmeDJtb3hvN2svc05wVm4rc2svczE0SGFWaEZwcldDbDN6eENmK1o3RFR6d1FkYWZQeDRXYnl2VGZ5YjhiVDcxUC85dWJ1Y1ZxMnFZK2EydTZzN1pRTnhtNDZiY3U2M0JuNzUvSURDTWhpbnBLdExpa0EvalpoNjBwUElTTkxMQlZ3UWIxZWYyTC9xajJVdk9MVzNqbjk2Yy9uNWlkMm9sbTN0cmFlMkF0aHNWdDdxSFNlMk9FdmhmdkVhalY5d1hjdEhqWmxCbzgrRlZMaFZHK2NVWWhiMDdXcGhSVkRsS2kxR3N5eXhrc2VZY0d3d3JKQitLY1BMZFZxdXBJYmN2V3AvT2Z6cmw3OXA2Ny9PME9FU1FVWitzallyNGZXcDREOW1aVVVNcGpndUI0VmJtMkFhZnJFWklaUmVYdk5mVzd0UUgxYWtuR2hxc2pVOXhIWDlGcEI2ejIzcGttMldsY1QwMzBwUFdteFBacGJLL241SEVwazZCeEo4Kyt2U0VlbHQwQ1dGc3I5S1BKWFUvZC9wK0Q4NzZwbFYxVld2ck5ENlpRUERleitGd0FBLy8vS2c2OGozdzhBQUE9PQGFQQkwvS2TBiMm84SzJjRnpQQjltOGVCRmZ4ZHhHaFE5MGttaXRLL0MrWGl6bUkxUHVrMjZqYjFBNmYzRnpNbWo1bVFWZTNRZHNkdVc3emxXNUcwMHZsek1oalFhM0xhMG50L3JydENnazhObVFNTDVNQS9uRTRvS0o0dUs5aC81NGZlNlBKeTlxaEViODVFOTVvdjUwUHpvekdoNms5LzJMamFqZVVnWGRsc2hyNzlGRzU3NHZVNnltSGMzbzFSWml6UW9valF3dy9sdERtZFhhemh6dHJIWHp4ZjJZOHNmaENKOHNMYmhiR3lobEpwWWY4K0hkamozUDJzTTMrdHZVTThSOFd4SVVlclEyQXUybzVTdVI4MlFJamJPSXZ1aTVROFdyNlBuVG43YnMreHdObDVIOCs0S05XOC9QbTlicXlqdHMzRDJSUzNZUzh1L1dkSElNeitqWnBjdXRtWGVURHp2Nm5qZFJmYUVQbnJ0SXU3d3hCOTAxNGhOdG5lSnZxTlo1VzNLRXppWW1LaFQzUnRwM1d1ZWpKL1J4ZDJYU2haNy9TSzBBL054djNldUg2WHRsekRRdUY5YS92WHQ1bmJhMmVoY2pCNk9iNmRBM3Y0K2c0TmVjbkYzbmV4bGt4VktZeHIzOTN1RDRXYXgrUzMycThaR2RpREQyZGlNbXY0LzlXNStkejZMMk5oY3pKeG5IYWM0VlhRMEg5TkZNeWpnZk9Mb2I4UkNpaEwrSDdEN1pvQTFwTGt1MVI4QTVvcExCQ2xoaVY1aUJpT3ErVXlKSEJzZ2hhOFRYTmE4Qks1amdKU3cwOW8yZ0lJaXdhcDMvd2pjUy9Pd3ZNVXBGNFdXN0F5QVg1V0FIWkZvWTRmbERWc0Q5K3MzQTVBVUp2ZzNaS2RaQnlaYStEUEZhZWFCRWFaN1NFcldtR0VwN3dXUDhKczdMQ0dWMkFCTFNHZ3U4SFFsc0Z4eEdnTzNxYnNGVVFUU2EweGg4WUFSWjdFRWJzczBRSVlGNGZGUlpKa0drRGxDV01vekFNc0FpcVNZNStwTWNiZVBENHhQaUtZQkdJL3hBNllZS1M0cWp6VW5McmxJZTV3dFNSbjI2dXNXWnU4emZoMmxjVlJIbGZvK2JQYzVwZmVjRWxSb2xxY2JXTWpEMWdRblJDcWRBckRLbzBaVUtCdzN1RWhPK3htWFJIRlJURERGVU9yUUU3WkVtZGd2dFk4ODdqREdWVW4yKzBoblBCNmRCVDRUaEdzbmV4UktPYTR5Q0F3Z0lvaktsL1dtdVZnUlZ0QUNCa0FDUTRYM3lka1pRR0FZazM4b2Y5YmZ6WitvSG5lUDUweVZXZ0pMbmd0VTFRb2xLVkhsRjhweTRKb05YUkg3eHc3TWh1TVJVR0w4TjhmeWpaNzlWdEV1TlhjR09LUzV4NW5DcitxZEFseEtUL0E4QTI3TGNab1hCaEE1Njd3bmVwUlk3Q1VsYn96dTVSbHFtNWdFejl3TElNR1lFcElT&password=12313&WXNCTnB5UEx3aWlSSlo4a1EweUg3MzRqbTM5cDAwenZlWjVYV0t2VmIxZTcydDh1UHdDREtRWXVXTC9ndXNRb0YwUVZkWW5GR2d0Z0FNS1dITGcvd0pJSXFiN0hPS084d0RGd2dXM2FWdDFzMVcxbmFsbXVmZVUyTHhyT1JkTnB0WnRPNjkvbWxXdWF3QUFVdm5QS011dTJQYlVjMTI2NVZxdHhlZVhZVjYzMnBYMDhGV09LVmFsZkxpUVNKRk9FTStDQ3h5d1JNTVkxeE5OTUt3RURTQVZWTG9FTFpKNWhJWEdNWTdBekFGcEJvYlRyS1ZZd2hncnE3dy92dXNaQ1ZsYXNodGt3NjJ1c3JVQXBmL0dpYysvWHFtTTF2cXlkb3dFRHdJd0VSNlMxWFVxeTRBMjJkZFVFQmxCRnBwMkJXVVlKZ2lYMHpnQ1VveGZnc3B4U0F5aWNaaFFxTElINzllajhVZmhwL1lLL0h3eC9yL3dwZndqQ2pRS21WUHRkWGh3czV0MHNTSU1DMlhRZFBmTWtmcjc1REcyYWg5YzhlYlNESWs3cGMvZ2xVK0Y4c2dxOXZybVk4czkrcjVzdlpoYTlJMTBiMm84SzJjRnpQQjltOGVCRmZ4ZHhHaFE5MGttaXRLL0MrWGl6bUkxUHVrMjZqYjFBNmYzRnpNbWo1bVFWZTNRZHNkdVc3emxXNUcwMHZsek1oalFhM0xhMG50L3JydENnazhObVFNTDVNQS9uRTRvS0o0dUs5aC81NGZlNlBKeTlxaEViODVFOTVvdjUwUHpvekdoNms5LzJMamFqZVVnWGRsc2hyNzlGRzU3NHZVNnltSGMzbzFSWml6UW9valF3dy9sdERtZFhhemh6dHJIWHp4ZjJZOHNmaENKOHNMYmhiR3lobEpwWWY4K0hkamozUDJzTTMrdHZVTThSOFd4SVVlclEyQXUybzVTdVI4MlFJamJPSXZ1aTVROFdyNlBuVG43YnMreHdObDVIOCs0S05XOC9QbTlicXlqdHMzRDJSUzNZUzh1L1dkSElNeitqWnBjdXRtWGVURHp2Nm5qZFJmYUVQbnJ0SXU3d3hCOTAxNGhOdG5lSnZxTlo1VzNLRXppWW1LaFQzUnRwM1d1ZWpKL1J4ZDJYU2haNy9TSzBBL054djNldUg2WHRsekRRdUY5YS92WHQ1bmJhMmVoY2pCNk9iNmRBM3Y0K2c0TmVjbkYzbmV4bGt4VktZeHIzOTN1RDRXYXgrUzMycThaR2RpREQyZGlNbXY0LzlXNStkejZMMk5oY3pKeG5IYWM0VlhRMEg5TkZNeWpnZk9Mb2I4UkNpaEwrSDdEN1pvQTFwTGt1MVI4QTVvcExCQ2xoaVY1aUJpT3ErVXlKSEJzZ2hhOFRYTmE4Qks1amdKU3cwOW8yZ0lJaXdhcDMvd2pjUy9Pd3ZNVXBGNFdXN0F5QVg1V0FIWkZvWTRmbERWc0Q5K3MzQTVBVUp2ZzNaS2RaQnlaYStEUEZhZWFCRWFaN1NFcldtR0VwN3dXUDhKczdMQ0dWMkFCTFNHZ3U4SFFsc0Z4eEdnTzNxYnNGVVFUU2EweGg4WUFSWjdFRWJzczBRSVlGNGZGUlpKa0drRGxDV01vekFNc0FpcVNZNStwTWNiZVBENHhQaUtZQkdJL3hBNllZS1M0cWp6VW5McmxJZTV3dFNSbjI2dXNXWnU4emZoMmxjVlJIbGZvK2JQYzVwZmVjRWxSb2xxY2JXTWpEMWdRblJDcWRBckRLbzBaVUtCdzN1RWhPK3htWFJIRlJURERGVU9yUUU3WkVtZGd2dFk4ODdqREdWVW4yKzBoblBCNmRCVDRUaEdzbmV4UktPYTR5Q0F3Z0lvaktsL1dtdVZnUlZ0QUNCa0FDUTRYM3lka1pRR0FZazM4b2Y5YmZ6WitvSG5lUDUweVZXZ0pMbmd0VTFRb2xLVkhsRjhweTRKb05YUkg3eHc3TWh1TVJVR0w4TjhmeWpaNzlWdEV1TlhjR09LUzV4NW5DcitxZEFseEtUL0E4QTI3TGNab1hCaEE1Njd3bmVwUlk3Q1VsYnRsWnl5ejhuTVNWVXRtWXgvaWU2NW1qYVZxbVdRa3JRZXZ5cXYyMnZrU0czdXBicGF4YVgxMWRYUjNIZzZQYXlZVU9RbFVzZi95U2VNVXBGZ2ZQdm43VFo5QUtwL0F3VVN3SmZUdE5ORmFZcGlSaFhPRFR1REI2bVV6bmxxYllJZTBSSnd1OVlEWGFhSm96VHJSeW9JNDZYMk1oU1B6enpJRlN6ZFA5YlRqWC9mM1ViejdnMGNUM25GVTBDN2JJNjU5enJvT2FFeHJwZnVSTk1tVDNTZVFGczhYc05kT3pDcHkxODZudERDdXVmcFYzcEdzaUZsRE43ZnQrTFNNdmVMa2ozVXRjZFBJZzdjdDRGbXo5d1NiUmZjM3ZEWDgvSTZSQnZwZ05aZmpnSi9GZ2FJVVAzZmF5OU9NNFg3ekJIS1hXT2h3RU1neTZxOWhMa3VYY1hIOTQzMEc0aWdZQlJXWGY3aWgvMEpXTCtTU05ta1AxeFc3bllVcFoxYS9MUHBWRnN6NExneUVOYmJxTkIwUG5GL3ZzdERmeDJtb3hvN2svc05wVm4rc2svczE0SGFWaEZwcldDbDN6eENmK1o3RFR6d1FkYWZQeDRXYnl2VGZ5YjhiVDcxUC85dWJ1Y1ZxMnFZK2EydTZzN1pRTnhtNDZiY3U2M0JuNzUvSURDTWhpbnBLdExpa0EvalpoNjBwUElTTkxMQlZ3UWIxZWYyTC9xajJVdk9MVzNqbjk2Yy9uNWlkMm9sbTN0cmFlMkF0aHNWdDdxSFNlMk9FdmhmdkVhalY5d1hjdEhqWmxCbzgrRlZMaFZHK2NVWWhiMDdXcGhSVkRsS2kxR3N5eXhrc2VZY0d3d3JKQitLY1BMZFZxdXBJYmN2V3AvT2Z6cmw3OXA2Ny9PME9FU1FVWitzallyNGZXcDREOW1aVVVNcGpndUI0VmJtMkFhZnJFWklaUmVYdk5mVzd0UUgxYWtuR2hxc2pVOXhIWDlGcEI2ejIzcGttMldsY1QwMzBwUFdteFBacGJLL241SEVwazZCeEo4Kyt2U0VlbHQwQ1dGc3I5S1BKWFUvZC9wK0Q4NzZwbFYxVld2ck5ENlpRUERleitGd0FBLy8vS2c2OGozdzhBQUE9PQ"
	desensitization1 := LogDesensitization1(log1)
	fmt.Println(desensitization1)

	rl, _ := regexp.Compile("password=[^&]*")
	hyq := "name=hyq&password=123&age=12,Password\":\"dasfq\",daw"
	hyq1 := "{\"Password\":\"Password\",\"PassWord\":\"PassWord\",\"Fruits\":[{}]}"
	result := rl.ReplaceAllString(hyq, "password=***")
	fmt.Println(result)
	ps, _ := regexp.Compile("Password\":\"[^\"]*")
	result1 := ps.ReplaceAllString(hyq, "Password\":\"***")
	result2 := ps.ReplaceAllString(hyq1, "Password\":\"***")
	fmt.Println(result1)
	fmt.Println(result2)
}

func LogDesensitization(logModel interface{}) string {
	data, err := json.Marshal(logModel)
	if err != nil {
		return "Marshal failed"
	}
	log := string(data)
	pwd1, _ := regexp.Compile("[pP]ass[wW]ord=[^&]*")
	pwd2, _ := regexp.Compile("[pP]ass[wW]ord\":\"[^\"]*")
	log = pwd1.ReplaceAllString(log, "password=***")
	log = pwd2.ReplaceAllString(log, "Password\":\"***")
	return log
}

func LogDesensitization1(log string) string {
	now := time.Now()
	pwd1, _ := regexp.Compile("password=[^&]*")
	pwd2, _ := regexp.Compile("Password\":\"[^\"]*")
	timeCost(now, "1")
	log = pwd2.ReplaceAllString(log, "Password\":\"***")
	timeCost(now, "2")
	timeCost(now, "3")
	log = pwd1.ReplaceAllString(log, "password=***")
	timeCost(now, "4")
	return log
}

//@brief：耗时统计函数
func timeCost(start time.Time, name string) {
	tc := time.Since(start)
	log.Printf("hyqtest time %s cost = %v\n", name, tc)
}
